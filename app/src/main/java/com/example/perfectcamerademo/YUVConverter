public class YUVConverter {
    static {
        System.loadLibrary("yuvconverter");
    }

    public native Bitmap yuvToRgb(byte[] yuvData, int width, int height);

    public Bitmap convertYUV420888ToARGB8888(Image image) {
        if (image == null) {
            throw new IllegalArgumentException("image must not be null");
        }

        int width = image.getWidth();
        int height = image.getHeight();
        Image.Plane[] planes = image.getPlanes();
        ByteBuffer yBuffer = planes[0].getBuffer();
        ByteBuffer uBuffer = planes[1].getBuffer();
        ByteBuffer vBuffer = planes[2].getBuffer();

        int ySize = yBuffer.remaining();
        int uSize = uBuffer.remaining();
        int vSize = vBuffer.remaining();

        byte[] yuvData = new byte[ySize + uSize + vSize];

        yBuffer.get(yuvData, 0, ySize);
        vBuffer.get(yuvData, ySize, vSize);
        uBuffer.get(yuvData, ySize + vSize, uSize);

        return yuvToRgb(yuvData, width, height);
    }
}

#include <jni.h>
#include <android/bitmap.h>
#include <cstring>

extern "C" {

JNIEXPORT jobject JNICALL
Java_com_example_YUVConverter_yuvToRgb(JNIEnv *env, jobject thiz, jbyteArray yuvData, jint width, jint height) {
    jbyte *yuv = env->GetByteArrayElements(yuvData, nullptr);
    if (yuv == nullptr) {
        return nullptr;
    }

    AndroidBitmapInfo bitmapInfo;
    bitmapInfo.width = width;
    bitmapInfo.height = height;
    bitmapInfo.stride = width * 4;
    bitmapInfo.format = ANDROID_BITMAP_FORMAT_RGBA_8888;

    jobject bitmap = nullptr;
    int result = AndroidBitmap_createBitmap(env, &bitmapInfo, &bitmap);
    if (result < 0) {
        env->ReleaseByteArrayElements(yuvData, yuv, 0);
        return nullptr;
    }

    void *bitmapPixels;
    result = AndroidBitmap_lockPixels(env, bitmap, &bitmapPixels);
    if (result < 0) {
        env->ReleaseByteArrayElements(yuvData, yuv, 0);
        return nullptr;
    }

    uint8_t *srcY = reinterpret_cast<uint8_t *>(yuv);
    uint8_t *srcU = srcY + width * height;
    uint8_t *srcV = srcU + width * height / 4;

    uint8_t *dst = reinterpret_cast<uint8_t *>(bitmapPixels);

    for (int j = 0; j < height; ++j) {
        for (int i = 0; i < width; ++i) {
            int y = srcY[j * width + i] & 0xff;
            int u = srcU[(j / 2) * (width / 2) + (i / 2)] & 0xff;
            int v = srcV[(j / 2) * (width / 2) + (i / 2)] & 0xff;

            y = y < 16 ? 16 : y;

            int r = (int) (1.164f * (y - 16) + 1.596f * (v - 128));
            int g = (int) (1.164f * (y - 16) - 0.813f * (v - 128) - 0.391f * (u - 128));
            int b = (int) (1.164f * (y - 16) + 2.018f * (u - 128));

            r = r < 0 ? 0 : (r > 255 ? 255 : r);
            g = g < 0 ? 0 : (g > 255 ? 255 : g);
            b = b < 0 ? 0 : (b > 255 ? 255 : b);

            int pixelIndex = j * width + i;
            dst[pixelIndex * 4 + 0] = static_cast<uint8_t>(r);
            dst[pixelIndex * 4 + 1] = static_cast<uint8_t>(g);
            dst[pixelIndex * 4 + 2] = static_cast<uint8_t>(b);
            dst[pixelIndex * 4 + 3] = 255; // Alpha
        }
    }

    AndroidBitmap_unlockPixels(env, bitmap);
    env->ReleaseByteArrayElements(yuvData, yuv, 0);

    return bitmap;
}
}